# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msg_types/StateArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import msg_types.msg

class StateArray(genpy.Message):
  _md5sum = "f6495b47ab8804317c3ad5428e9da0a5"
  _type = "msg_types/StateArray"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """time stamp
msg_types/State[] desired_path
msg_types/TrajectoryArray sync_predictions
msg_types/State initial_state


================================================================================
MSG: msg_types/State
time stamp
float32 x
float32 y
float32 heading
float32 v
float32 w


================================================================================
MSG: msg_types/TrajectoryArray
time stamp
msg_types/PositionArray[] trajectories


================================================================================
MSG: msg_types/PositionArray
time stamp
msg_types/Position[] objects


================================================================================
MSG: msg_types/Position
time stamp
float32 x
float32 y
float32 t
uint32 id
bool actual
"""
  __slots__ = ['stamp','desired_path','sync_predictions','initial_state']
  _slot_types = ['time','msg_types/State[]','msg_types/TrajectoryArray','msg_types/State']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,desired_path,sync_predictions,initial_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StateArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.desired_path is None:
        self.desired_path = []
      if self.sync_predictions is None:
        self.sync_predictions = msg_types.msg.TrajectoryArray()
      if self.initial_state is None:
        self.initial_state = msg_types.msg.State()
    else:
      self.stamp = genpy.Time()
      self.desired_path = []
      self.sync_predictions = msg_types.msg.TrajectoryArray()
      self.initial_state = msg_types.msg.State()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      length = len(self.desired_path)
      buff.write(_struct_I.pack(length))
      for val1 in self.desired_path:
        _v1 = val1.stamp
        _x = _v1
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_get_struct_5f().pack(_x.x, _x.y, _x.heading, _x.v, _x.w))
      _x = self
      buff.write(_get_struct_2I().pack(_x.sync_predictions.stamp.secs, _x.sync_predictions.stamp.nsecs))
      length = len(self.sync_predictions.trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.sync_predictions.trajectories:
        _v2 = val1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        length = len(val1.objects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.objects:
          _v3 = val2.stamp
          _x = _v3
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = val2
          buff.write(_get_struct_3fIB().pack(_x.x, _x.y, _x.t, _x.id, _x.actual))
      _x = self
      buff.write(_get_struct_2I5f().pack(_x.initial_state.stamp.secs, _x.initial_state.stamp.nsecs, _x.initial_state.x, _x.initial_state.y, _x.initial_state.heading, _x.initial_state.v, _x.initial_state.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.desired_path is None:
        self.desired_path = None
      if self.sync_predictions is None:
        self.sync_predictions = msg_types.msg.TrajectoryArray()
      if self.initial_state is None:
        self.initial_state = msg_types.msg.State()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.desired_path = []
      for i in range(0, length):
        val1 = msg_types.msg.State()
        _v4 = val1.stamp
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.x, _x.y, _x.heading, _x.v, _x.w,) = _get_struct_5f().unpack(str[start:end])
        self.desired_path.append(val1)
      _x = self
      start = end
      end += 8
      (_x.sync_predictions.stamp.secs, _x.sync_predictions.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sync_predictions.trajectories = []
      for i in range(0, length):
        val1 = msg_types.msg.PositionArray()
        _v5 = val1.stamp
        _x = _v5
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.objects = []
        for i in range(0, length):
          val2 = msg_types.msg.Position()
          _v6 = val2.stamp
          _x = _v6
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          _x = val2
          start = end
          end += 17
          (_x.x, _x.y, _x.t, _x.id, _x.actual,) = _get_struct_3fIB().unpack(str[start:end])
          val2.actual = bool(val2.actual)
          val1.objects.append(val2)
        self.sync_predictions.trajectories.append(val1)
      _x = self
      start = end
      end += 28
      (_x.initial_state.stamp.secs, _x.initial_state.stamp.nsecs, _x.initial_state.x, _x.initial_state.y, _x.initial_state.heading, _x.initial_state.v, _x.initial_state.w,) = _get_struct_2I5f().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      length = len(self.desired_path)
      buff.write(_struct_I.pack(length))
      for val1 in self.desired_path:
        _v7 = val1.stamp
        _x = _v7
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_get_struct_5f().pack(_x.x, _x.y, _x.heading, _x.v, _x.w))
      _x = self
      buff.write(_get_struct_2I().pack(_x.sync_predictions.stamp.secs, _x.sync_predictions.stamp.nsecs))
      length = len(self.sync_predictions.trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.sync_predictions.trajectories:
        _v8 = val1.stamp
        _x = _v8
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        length = len(val1.objects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.objects:
          _v9 = val2.stamp
          _x = _v9
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = val2
          buff.write(_get_struct_3fIB().pack(_x.x, _x.y, _x.t, _x.id, _x.actual))
      _x = self
      buff.write(_get_struct_2I5f().pack(_x.initial_state.stamp.secs, _x.initial_state.stamp.nsecs, _x.initial_state.x, _x.initial_state.y, _x.initial_state.heading, _x.initial_state.v, _x.initial_state.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.desired_path is None:
        self.desired_path = None
      if self.sync_predictions is None:
        self.sync_predictions = msg_types.msg.TrajectoryArray()
      if self.initial_state is None:
        self.initial_state = msg_types.msg.State()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.desired_path = []
      for i in range(0, length):
        val1 = msg_types.msg.State()
        _v10 = val1.stamp
        _x = _v10
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _x = val1
        start = end
        end += 20
        (_x.x, _x.y, _x.heading, _x.v, _x.w,) = _get_struct_5f().unpack(str[start:end])
        self.desired_path.append(val1)
      _x = self
      start = end
      end += 8
      (_x.sync_predictions.stamp.secs, _x.sync_predictions.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sync_predictions.trajectories = []
      for i in range(0, length):
        val1 = msg_types.msg.PositionArray()
        _v11 = val1.stamp
        _x = _v11
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.objects = []
        for i in range(0, length):
          val2 = msg_types.msg.Position()
          _v12 = val2.stamp
          _x = _v12
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          _x = val2
          start = end
          end += 17
          (_x.x, _x.y, _x.t, _x.id, _x.actual,) = _get_struct_3fIB().unpack(str[start:end])
          val2.actual = bool(val2.actual)
          val1.objects.append(val2)
        self.sync_predictions.trajectories.append(val1)
      _x = self
      start = end
      end += 28
      (_x.initial_state.stamp.secs, _x.initial_state.stamp.nsecs, _x.initial_state.x, _x.initial_state.y, _x.initial_state.heading, _x.initial_state.v, _x.initial_state.w,) = _get_struct_2I5f().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2I5f = None
def _get_struct_2I5f():
    global _struct_2I5f
    if _struct_2I5f is None:
        _struct_2I5f = struct.Struct("<2I5f")
    return _struct_2I5f
_struct_3fIB = None
def _get_struct_3fIB():
    global _struct_3fIB
    if _struct_3fIB is None:
        _struct_3fIB = struct.Struct("<3fIB")
    return _struct_3fIB
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
