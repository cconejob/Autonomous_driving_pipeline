// Generated by gencpp from file msg_types/TrajectoryArray.msg
// DO NOT EDIT!


#ifndef MSG_TYPES_MESSAGE_TRAJECTORYARRAY_H
#define MSG_TYPES_MESSAGE_TRAJECTORYARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <msg_types/PositionArray.h>

namespace msg_types
{
template <class ContainerAllocator>
struct TrajectoryArray_
{
  typedef TrajectoryArray_<ContainerAllocator> Type;

  TrajectoryArray_()
    : stamp()
    , trajectories()  {
    }
  TrajectoryArray_(const ContainerAllocator& _alloc)
    : stamp()
    , trajectories(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::vector< ::msg_types::PositionArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::msg_types::PositionArray_<ContainerAllocator> >::other >  _trajectories_type;
  _trajectories_type trajectories;





  typedef boost::shared_ptr< ::msg_types::TrajectoryArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_types::TrajectoryArray_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryArray_

typedef ::msg_types::TrajectoryArray_<std::allocator<void> > TrajectoryArray;

typedef boost::shared_ptr< ::msg_types::TrajectoryArray > TrajectoryArrayPtr;
typedef boost::shared_ptr< ::msg_types::TrajectoryArray const> TrajectoryArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_types::TrajectoryArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_types::TrajectoryArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_types::TrajectoryArray_<ContainerAllocator1> & lhs, const ::msg_types::TrajectoryArray_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.trajectories == rhs.trajectories;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_types::TrajectoryArray_<ContainerAllocator1> & lhs, const ::msg_types::TrajectoryArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_types

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msg_types::TrajectoryArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_types::TrajectoryArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_types::TrajectoryArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_types::TrajectoryArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_types::TrajectoryArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_types::TrajectoryArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_types::TrajectoryArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7766634badb769863e045242311bbf96";
  }

  static const char* value(const ::msg_types::TrajectoryArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7766634badb76986ULL;
  static const uint64_t static_value2 = 0x3e045242311bbf96ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_types::TrajectoryArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_types/TrajectoryArray";
  }

  static const char* value(const ::msg_types::TrajectoryArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_types::TrajectoryArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"msg_types/PositionArray[] trajectories\n"
"\n"
"\n"
"================================================================================\n"
"MSG: msg_types/PositionArray\n"
"time stamp\n"
"msg_types/Position[] objects\n"
"\n"
"\n"
"================================================================================\n"
"MSG: msg_types/Position\n"
"time stamp\n"
"float32 x\n"
"float32 y\n"
"float32 t\n"
"uint32 id\n"
"bool actual\n"
;
  }

  static const char* value(const ::msg_types::TrajectoryArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_types::TrajectoryArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.trajectories);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_types::TrajectoryArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_types::TrajectoryArray_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "trajectories[]" << std::endl;
    for (size_t i = 0; i < v.trajectories.size(); ++i)
    {
      s << indent << "  trajectories[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::msg_types::PositionArray_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_TYPES_MESSAGE_TRAJECTORYARRAY_H
