// Generated by gencpp from file msg_types/PositionArray.msg
// DO NOT EDIT!


#ifndef MSG_TYPES_MESSAGE_POSITIONARRAY_H
#define MSG_TYPES_MESSAGE_POSITIONARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <msg_types/Position.h>

namespace msg_types
{
template <class ContainerAllocator>
struct PositionArray_
{
  typedef PositionArray_<ContainerAllocator> Type;

  PositionArray_()
    : stamp()
    , objects()  {
    }
  PositionArray_(const ContainerAllocator& _alloc)
    : stamp()
    , objects(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::vector< ::msg_types::Position_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::msg_types::Position_<ContainerAllocator> >::other >  _objects_type;
  _objects_type objects;





  typedef boost::shared_ptr< ::msg_types::PositionArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_types::PositionArray_<ContainerAllocator> const> ConstPtr;

}; // struct PositionArray_

typedef ::msg_types::PositionArray_<std::allocator<void> > PositionArray;

typedef boost::shared_ptr< ::msg_types::PositionArray > PositionArrayPtr;
typedef boost::shared_ptr< ::msg_types::PositionArray const> PositionArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_types::PositionArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_types::PositionArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace msg_types

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'msg_types': ['/home/cconejob/StudioProjects/Autonomous_driving_pipeline/src/msg_types/msg', '/home/cconejob/StudioProjects/Autonomous_driving_pipeline/src/msg_types/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::msg_types::PositionArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_types::PositionArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_types::PositionArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_types::PositionArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_types::PositionArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_types::PositionArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_types::PositionArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "55fbca85e311ffe813e31fb2e1229ad7";
  }

  static const char* value(const ::msg_types::PositionArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x55fbca85e311ffe8ULL;
  static const uint64_t static_value2 = 0x13e31fb2e1229ad7ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_types::PositionArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_types/PositionArray";
  }

  static const char* value(const ::msg_types::PositionArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_types::PositionArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n\
msg_types/Position[] objects\n\
\n\
\n\
================================================================================\n\
MSG: msg_types/Position\n\
time stamp\n\
float32 x\n\
float32 y\n\
float32 t\n\
uint32 id\n\
bool actual\n\
";
  }

  static const char* value(const ::msg_types::PositionArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_types::PositionArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.objects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PositionArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_types::PositionArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_types::PositionArray_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::msg_types::Position_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_TYPES_MESSAGE_POSITIONARRAY_H
