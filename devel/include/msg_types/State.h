// Generated by gencpp from file msg_types/State.msg
// DO NOT EDIT!


#ifndef MSG_TYPES_MESSAGE_STATE_H
#define MSG_TYPES_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg_types
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : stamp()
    , x(0.0)
    , y(0.0)
    , heading(0.0)
    , v(0.0)
    , w(0.0)  {
    }
  State_(const ContainerAllocator& _alloc)
    : stamp()
    , x(0.0)
    , y(0.0)
    , heading(0.0)
    , v(0.0)
    , w(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _v_type;
  _v_type v;

   typedef float _w_type;
  _w_type w;





  typedef boost::shared_ptr< ::msg_types::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_types::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::msg_types::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::msg_types::State > StatePtr;
typedef boost::shared_ptr< ::msg_types::State const> StateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_types::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_types::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace msg_types

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'msg_types': ['/home/cconejob/StudioProjects/Autonomous_driving_pipeline/src/msg_types/msg', '/home/cconejob/StudioProjects/Autonomous_driving_pipeline/src/msg_types/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::msg_types::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_types::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_types::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_types::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_types::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_types::State_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_types::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "55db8396547b73cc1fc81951f570fc48";
  }

  static const char* value(const ::msg_types::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x55db8396547b73ccULL;
  static const uint64_t static_value2 = 0x1fc81951f570fc48ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_types::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_types/State";
  }

  static const char* value(const ::msg_types::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_types::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n\
float32 x\n\
float32 y\n\
float32 heading\n\
float32 v\n\
float32 w\n\
\n\
";
  }

  static const char* value(const ::msg_types::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_types::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.heading);
      stream.next(m.v);
      stream.next(m.w);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_types::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_types::State_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "v: ";
    Printer<float>::stream(s, indent + "  ", v.v);
    s << indent << "w: ";
    Printer<float>::stream(s, indent + "  ", v.w);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_TYPES_MESSAGE_STATE_H
